{"version":3,"sources":["logo.svg","serial.js","App.js","reportWebVitals.js","index.js"],"names":["serial","navigator","usb","getDevices","then","devices","map","device","Port","requestDevice","filters","vendorId","productId","this","device_","interfaceNumber_","endpointIn_","endpointOut_","prototype","connect","readLoop","transferIn","result","onReceive","data","error","onReceiveError","open","configuration","selectConfiguration","interfaces","forEach","element","alternates","elementalt","interfaceClass","interfaceNumber","endpoints","elementendpoint","direction","endpointNumber","claimInterface","selectAlternateInterface","controlTransferOut","requestType","recipient","request","value","index","disconnect","close","send","transferOut","port","App","state","val","handleChange","e","setState","target","keyPressed","key","view","Uint8Array","parseInt","textDecoder","TextDecoder","console","log","decode","connectdevice","requestPort","selectedPort","catch","getPorts","ports","length","className","src","logo","alt","onClick","onChange","onKeyPress","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae0663b0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","var serial = {};\n\nserial.getPorts = function () {\n  return navigator.usb.getDevices().then((devices) => {\n    return devices.map((device) => new serial.Port(device));\n  });\n};\n\nserial.requestPort = function () {\n  const filters = [\n    { vendorId: 0x2341, productId: 0x8036 }, // Arduino Leonardo\n    { vendorId: 0x2341, productId: 0x8037 }, // Arduino Micro\n    { vendorId: 0x2341, productId: 0x804d }, // Arduino/Genuino Zero\n    { vendorId: 0x2341, productId: 0x804e }, // Arduino/Genuino MKR1000\n    { vendorId: 0x2341, productId: 0x804f }, // Arduino MKRZERO\n    { vendorId: 0x2341, productId: 0x8050 }, // Arduino MKR FOX 1200\n    { vendorId: 0x2341, productId: 0x8052 }, // Arduino MKR GSM 1400\n    { vendorId: 0x2341, productId: 0x8053 }, // Arduino MKR WAN 1300\n    { vendorId: 0x2341, productId: 0x8054 }, // Arduino MKR WiFi 1010\n    { vendorId: 0x2341, productId: 0x8055 }, // Arduino MKR NB 1500\n    { vendorId: 0x2341, productId: 0x8056 }, // Arduino MKR Vidor 4000\n    { vendorId: 0x2341, productId: 0x8057 }, // Arduino NANO 33 IoT\n    { vendorId: 0x239a }, // Adafruit Boards!\n  ];\n  return navigator.usb\n    .requestDevice({ filters: filters })\n    .then((device) => new serial.Port(device));\n};\n\nserial.Port = function (device) {\n  this.device_ = device;\n  this.interfaceNumber_ = 2; // original interface number of WebUSB Arduino demo\n  this.endpointIn_ = 5; // original in endpoint ID of WebUSB Arduino demo\n  this.endpointOut_ = 4; // original out endpoint ID of WebUSB Arduino demo\n};\n\nserial.Port.prototype.connect = function () {\n  let readLoop = () => {\n    this.device_.transferIn(this.endpointIn_, 64).then(\n      (result) => {\n        this.onReceive(result.data);\n        readLoop();\n      },\n      (error) => {\n        this.onReceiveError(error);\n      }\n    );\n  };\n\n  return this.device_\n    .open()\n    .then(() => {\n      if (this.device_.configuration === null) {\n        return this.device_.selectConfiguration(1);\n      }\n    })\n    .then(() => {\n      var configurationInterfaces = this.device_.configuration.interfaces;\n      configurationInterfaces.forEach((element) => {\n        element.alternates.forEach((elementalt) => {\n          if (elementalt.interfaceClass == 0xff) {\n            this.interfaceNumber_ = element.interfaceNumber;\n            elementalt.endpoints.forEach((elementendpoint) => {\n              if (elementendpoint.direction == \"out\") {\n                this.endpointOut_ = elementendpoint.endpointNumber;\n              }\n              if (elementendpoint.direction == \"in\") {\n                this.endpointIn_ = elementendpoint.endpointNumber;\n              }\n            });\n          }\n        });\n      });\n    })\n    .then(() => this.device_.claimInterface(this.interfaceNumber_))\n    .then(() => this.device_.selectAlternateInterface(this.interfaceNumber_, 0))\n    .then(() =>\n      this.device_.controlTransferOut({\n        requestType: \"class\",\n        recipient: \"interface\",\n        request: 0x22,\n        value: 0x01,\n        index: this.interfaceNumber_,\n      })\n    )\n    .then(() => {\n      readLoop();\n    });\n};\n\nserial.Port.prototype.disconnect = function () {\n  return this.device_\n    .controlTransferOut({\n      requestType: \"class\",\n      recipient: \"interface\",\n      request: 0x22,\n      value: 0x00,\n      index: this.interfaceNumber_,\n    })\n    .then(() => this.device_.close());\n};\n\nserial.Port.prototype.send = function (data) {\n  return this.device_.transferOut(this.endpointOut_, data);\n};\n\nexport default serial;\n","import logo from './logo.svg';\nimport './App.css';\nimport serial from './serial.js';\nimport {Component} from 'react';\n\nlet port = null;\n\nclass App extends Component {\n\n  state={val:\"\", connect: false}\n\n  componentDidMount () {\n    serial.getPorts().then(ports => {\n      if (ports.length === 0) {\n        console.log('No device found.');\n      } else {\n        console.log('Connecting...');\n        port = ports[0];\n        this.connect();\n      }\n    });\n  }\n\n  handleChange = e =>{\n    this.setState({val:e.target.value});\n  }\n\n  keyPressed = e => {\n    if (e.key === \"Enter\") {\n      let view = new Uint8Array(1);\n      view[0] = parseInt(this.state.val);\n      port.send(view);\n    }\n  }\n\n  connect = () => {\n    port.connect().then(() => {\n        this.setState({connect: true});\n        port.onReceive = data => {\n          let textDecoder = new TextDecoder();\n          console.log(textDecoder.decode(data));\n        }\n        port.onReceiveError = error => {\n          console.error(error);\n        };\n      }, error => {\n        console.log(error);\n      });\n  }\n\n  connectdevice = () => {\n    console.log(\"connecting\");\n    if (port) {\n      port.disconnect();\n      port = null;\n      this.setState({connect: false});\n    } else {\n      serial.requestPort().then(selectedPort => {\n        port = selectedPort;\n        console.log(port);\n        this.connect();\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }\n  \n  render (){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <button onClick = {this.connectdevice}>{this.state.connect ? 'Connected':'Connect'}</button>\n          <input onChange={this.handleChange} onKeyPress={this.keyPressed} value={this.state.val} />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}